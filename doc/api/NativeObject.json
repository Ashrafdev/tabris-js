{
  "type": "NativeObject",
  "description": "Base class for all objects with a native implementation.",
  "constructor": {
    "access": "protected",
    "parameters": [
      {
        "name": "properties",
        "type": "{[property: string]: any}",
        "optional": true,
        "description": "Sets all key-value pairs in the properties object as widget properties."
      }
    ]
  },
  "properties": {
    "cid": {
      "type": "string",
      "readonly": true,
      "const": true,
      "description": "An application-wide unique identifier automatically assigned to all native objects on creation. It follows the pattern '$<number>', where the number is incremented for each new NativeObject instance."
    },
    "jsxAttributes": {
      "const": true,
      "readonly": true,
      "type": "JSXAttributes<this>",
      "description": "When using JSX with TypeScript (`.tsx` files), the type of this property determines which JSX attributes are valid for this object."
    }
  },
  "methods": {
    "on": [
      {
        "parameters": [
          {
            "name": "type",
            "type": "string",
            "description": "The type of events to listen for."
          },
          {
            "name": "listener",
            "type": "(event: EventObject) => void",
            "ts_type": "(event: EventObject<NativeObject>) => void",
            "description": "The listener function to register. This function will be called with an event object.\n\nIn TypeScript you should use the alternative `Listeners` API, e.g. `widget.onResize(listener);` instead of `widget.on({resize: listener});` The former provides more type information."
          },
          {
            "name": "context",
            "type": "object",
            "optional": true,
            "description": "In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object."
          }
        ],
        "returns": "this",
        "description": "Registers a *listener* function to be notified of events of the given *type*."
      },
      {
        "parameters": [
          {
            "name": "listeners",
            "type": "{event: Listener}",
            "ts_type": "{[event: string]: (event: EventObject<NativeObject>) => void}",
            "description": "A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`."
          }
        ],
        "returns": "this",
        "description": "Registers all listeners in the given object for the event type indicated by their key.\n\nIn TypeScript you should use the alternative `Listeners` API, e.g. `widget.onResize(listener);` instead of `widget.on('resize', listener);` The former provides more type information."
      }
    ],
    "once": [
      {
        "parameters": [
          {
            "name": "type",
            "type": "string",
            "description": "The type of the event to listen for."
          },
          {
            "name": "listener",
            "type": "(event: EventObject<NativeObject>) => void",
            "description": "The listener function to register. This function will be called with an event object."
          },
          {
            "name": "context",
            "type": "object",
            "optional": true,
            "description": "In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object."
          }
        ],
        "returns": "this",
        "description": "Same as `on`, but removes the listener after it has been invoked by an event.\n\nIn TypeScript you should use the alternative `Listeners` API, e.g. `widget.onResize.once(listener);` instead of `widget.once('resize', listener);` The former provides more type information."
      },
      {
        "parameters": [
          {
            "name": "listeners",
            "type": "EventsObject",
            "ts_type": "{[event: string]: (event: EventObject<NativeObject>) => void}",
            "description": "A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`."
          }
        ],
        "returns": "this",
        "description": "Same as `on`, but removes the listener after it has been invoked by an event.\n\nIn TypeScript you should use the alternative `Listeners` API, e.g. `widget.onResize.once(listener);` instead of `widget.once({resize: listener});` The former provides more type information."
      }
    ],
    "off": [
      {
        "parameters": [
          {
            "name": "type",
            "type": "string",
            "description": "The type of events to remove listeners for."
          },
          {
            "name": "listener",
            "type": "(event: EventObject<NativeObject>) => void",
            "description": "The listener function to remove."
          },
          {
            "name": "context",
            "type": "object",
            "optional": true,
            "description": "The context of the bound listener to remove."
          }
        ],
        "returns": "this",
        "description": "Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.\n\nIn TypeScript you should use the alternative `Listeners` API, e.g. `widget.onResize.off(listener);` instead of `widget.off('resize', listener});` The former provides more type information."
      },
      {
        "parameters": [
          {
            "name": "listeners",
            "type": "EventsObject",
            "ts_type": "{[event: string]: (event: EventObject<NativeObject>) => void}",
            "description": "A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`."
          }
        ],
        "returns": "this",
        "description": "Removes all listeners in the given object from the event type indicated by their key.\n\nIn TypeScript you should use the alternative `Listeners` API, e.g. `widget.onResize.off(listener);` instead of `widget.off({resize: listener});` The former provides more type information."
      }
    ],
    "trigger": [
      {
        "parameters": [
          {
            "name": "type",
            "type": "string",
            "description": "The type of event to trigger"
          }
        ],
        "returns": "this",
        "description": "Notifies all registered listeners for the given *type*.\n\nIn TypeScript you should use the alternative `Listeners` API, e.g. `widget.myEvent.trigger();` instead of `widget.trigger('myEvent');` The former provides more type information."
      },
      {
        "parameters": [
          {
            "name": "type",
            "type": "string",
            "description": "The type of event to trigger"
          },
          {
            "name": "object",
            "type": "object",
            "description": "The data to pass to listener functions."
          }
        ],
        "returns": "this",
        "description": "Passes the fields of the given *object* to all listeners registered for this event *type*.\n\nIn TypeScript you should use the alternative `Listeners` API, e.g. `widget.myEvent.trigger(eventData);` instead of `widget.trigger('myEvent', eventData});` The former provides more type information."
      },
      {
        "parameters": [
          {
            "name": "type",
            "type": "string",
            "description": "The type of event to trigger"
          },
          {
            "name": "eventObject",
            "type": "EventObject",
            "ts_type": "EventObject<this>",
            "description": "An instance of `EventObject` (or a subclass) to pass to listener functions."
          }
        ],
        "returns": "this",
        "description": "Initializes the given *eventObject* and passes it to all listeners registered for this event *type*. If *eventObject* was already initialized its fields are copied to a new event object.\n\nIn TypeScript you should use the alternative `Listeners` API, e.g. `widget.myEvent.trigger(eventObject);` instead of `widget.trigger('myEvent', eventObject});` The former provides more type information."
      }
    ],
    "set": [
      {
        "parameters": [
          {
            "name": "properties",
            "type": "Properties<this>"
          }
        ],
        "description": "Sets all key-value pairs in the properties object as widget properties.",
        "returns": "this"
      }
    ]
  }
}
