{
  "type": "Composite",
  "description": "An empty widget that can contain other widgets.",
  "generics": "ChildType extends Widget = Widget",
  "extends": "Widget",
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "properties",
        "type": "Properties<Composite>",
        "optional": true,
        "description": "Sets all key-value pairs in the properties object as widget properties."
      }
    ]
  },
  "properties": {
    "jsxProperties": {
      "const": true,
      "readonly": true,
      "ts_only": true,
      "type": "JSXProperties<this> & {children?: JSXChildren<ChildType>}"
    },
    "layout": {
      "type": "Layout|null",
      "const": true,
      "default": "Layout",
      "description": "The layout manager responsible for interpreting the [`layoutData`](./Widget.md#layoutData) of the child widgets of this Composite."
    },
    "padding": {
      "type": "BoxDimensions|number|null",
      "const": true,
      "description": "Additional space to add inside the widgets bounds. A shortcut to setting/getting the `padding` property of `layout`."
    }
  },
  "methods": {
    "append": [
      {
        "parameters": [
          {
            "name": "...widgets",
            "type": "Widget[]",
            "ts_type": "ChildType[]"
          }
        ],
        "returns": "this",
        "description": "Adds the given widgets to the composite."
      },
      {
        "parameters": [
          {
            "name": "widgets",
            "type": "Widget[]",
            "ts_type": "ChildType[]"
          }
        ],
        "returns": "this",
        "description": "Adds all widgets in the given array to the composite."
      },
      {
        "parameters": [
          {
            "name": "widgets",
            "type": "WidgetCollection",
            "ts_type": "WidgetCollection<ChildType>"
          }
        ],
        "returns": "this",
        "description": "Adds all widgets in the given collection to the composite."
      }
    ],
    "children": [
      {
        "parameters": [
          {
            "name": "selector",
            "type": "Selector<ChildType>",
            "optional": true,
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "WidgetCollection",
        "ts_returns": "WidgetCollection<ChildType>",
        "description": "Returns a (possibly empty) collection of all children of this widget that match the given selector.\n\nWhen writing custom UI components it may be useful to overwrite this method to prevent access to the internal children by external code. Doing so also affects `find` and `apply`, on this widget as well as on all parents, thereby preventing accidental clashes of widget id or class values. See also `_children`, `_find` and `_apply`."
      },
      {
        "ts_only": true,
        "generics": "U extends Widget",
        "parameters": [
          {
            "name": "constructor",
            "type": "{ new (...args: any[]): U }",
            "description": "A class to filter the results."
          }
        ],
        "returns": "WidgetCollection<U>",
        "description": "Returns a collection containing all children of all widgets in this collection that are instances of the given class."
      }
    ],
    "_children": [
      {
        "protected": true,
        "parameters": [
          {
            "name": "selector",
            "type": "Selector<ChildType>",
            "optional": true,
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "WidgetCollection",
        "ts_returns": "WidgetCollection<ChildType>",
        "description": "Identical to the `children` method, but intended to be used by subclasses in case the `children` method was overwritten. See `children` for details."
      },
      {
        "protected": true,
        "ts_only": true,
        "generics": "U extends Widget",
        "parameters": [
          {
            "name": "constructor",
            "type": "{ new (...args: any[]): U }",
            "description": "A class to filter the results."
          }
        ],
        "returns": "WidgetCollection<U>",
        "description": "Identical to the `children` method, but intended to be used by subclasses in case the `children` method was overwritten. See `children` for details."
      }
    ],
    "find": [
      {
        "parameters": [
          {
            "name": "selector",
            "type": "Selector<ChildType>",
            "optional": true,
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "WidgetCollection",
        "ts_returns": "WidgetCollection<Widget>",
        "description": "Returns a collection containing all descendants of all widgets in this collection that match the given selector.\n\nIf you wish to always exclude specific \"internal\" children from the result, overwrite the `children` method on their parent. See `children` for details."
      },
      {
        "ts_only": true,
        "generics": "U extends Widget",
        "parameters": [
          {
            "name": "constructor",
            "type": "{ new (...args: any[]): U }",
            "description": "A class to filter the results."
          }
        ],
        "returns": "WidgetCollection<U>",
        "description": "Returns a collection containing all descendants of all widgets in this collection that match the given selector.\n\nIf you wish to always exclude  specific \"internal\" children from the result, overwrite the `children` method on their parent. See `children` for details."
      }
    ],
    "_find": [
      {
        "protected": true,
        "parameters": [
          {
            "name": "selector",
            "type": "Selector<ChildType>",
            "optional": true,
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "WidgetCollection",
        "ts_returns": "WidgetCollection<Widget>",
        "description": "Identical to the `find` method, but intended to be used by subclasses in case the `children` method was overwritten. See `children` for details."
      },
      {
        "ts_only": true,
        "protected": true,
        "generics": "U extends Widget",
        "parameters": [
          {
            "name": "constructor",
            "type": "{ new (...args: any[]): U }",
            "description": "A class to filter the results."
          }
        ],
        "returns": "WidgetCollection<U>",
        "description": "Identical to the `find` method, but intended to be used by subclasses in case the `children` method was overwritten. See `children` for details."
      }
    ],
    "apply": {
      "parameters": [
        {
          "name": "properties",
          "type": "object",
          "ts_type": "{[selector: string]: Properties<Widget>}",
          "description": "An object in the format `{Selector: {property: value, property: value, ... }, Selector: ...}`"
        }
      ],
      "returns": "this",
      "description": "Applies the given properties to all descendants that match the associated selector(s).\n\nIf you wish to always exclude specific \"internal\" children from this, overwrite the `children` method on their parent. See `children` for details."
    },
    "_apply": {
      "protected": true,
      "parameters": [
        {
          "name": "properties",
          "type": "object",
          "ts_type": "{[selector: string]: Properties<Widget>}",
          "description": "An object in the format `{Selector: {property: value, property: value, ... }, Selector: ...}`"
        }
      ],
      "returns": "this",
      "description": "Identical to the `apply` method, but intended to be used by subclasses in case the `children` method was overwritten . See `children` for details."
    }
  },
  "events": {
    "addChild": {
      "description": "Fired when a child is added to this widget.",
      "parameters": {
        "child": {
          "description": "The widget that is added as a child.",
          "type": "Widget"
        },
        "index": {
          "description": "Denotes the position in the children list at which the child widget is added.",
          "type": "number"
        }
      }
    },
    "removeChild": {
      "description": "Fired when a child is removed from this widget.",
      "parameters": {
        "child": {
          "description": "The widget that is removed.",
          "type": "Widget"
        },
        "index": {
          "description": "The property `index` denotes the removed child widget's position in the children list.`",
          "type": "number"
        }
      }
    }
  }
}
